use crate::ast::{Expr, Opcode, Stmt, Block, Function, Program, Variable, DataType, VarVal, If};
use crate::lexer::{Token, Error};

grammar<'input>(input: &'input str);

extern {
    type Location = usize;
    type Error = Error;

    enum Token<'input> {
        // Data
        string => Token::StringValue(<&'input str>),
        number => Token::DecLiteral(<i32>),
        identifier => Token::Ident(<&'input str>),

        // Keywords
        "fn" => Token::Function,
        "if" => Token::If,
        "else" => Token::Else,

        // Data types
        "bool" => Token::Boolean,
        "i32" => Token::I32,
        "String" => Token::String,

        // true false
        "true" => Token::True,
        "false" => Token::False,

        // Symbols
        ":" => Token::Colon,
        ";" => Token::Semi,
        "," => Token::Comma,
        "=" => Token::Equal,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::ForwardSlash,
        "==" => Token::EqualEqual,
        "!=" => Token::BangEqual,
        "<" => Token::Less,
        "<=" => Token::LessEqual,
        ">" => Token::Greater,
        ">=" => Token::GreaterEqual,

        // Delimiters
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
    }
}

pub Program: Program = {
    <functions:Function*> => Program{
        functions: functions.iter().map(|f| (f.name.clone(), f.clone())).collect()
    },
}

pub Function: Function = {
    "fn" <id:Identifier> "(" <variables:Comma<Variable>> ")" <block:Block> =>
    {
        Function{
            name: id,
            arguments: variables,
            block: block,
        }
    },
}

Variable: Variable = {
    <id:Identifier> ":" <t:DataType> => {
        Variable {
            ident: id,
            value: match t {
                DataType::I32 => VarVal::I32(None),
                DataType::STRING => VarVal::STRING(None),
                DataType::BOOL => VarVal::BOOL(None),
                DataType::UNIT => VarVal::UNIT,
            }
        }
    }
}

DataType: DataType = {
    "i32" => DataType::I32,
    "String" => DataType::STRING,
    "bool" => DataType::BOOL,
    "(" ")" => DataType::UNIT,
}

pub Block: Block = {
    "{" <stmts:Stmt*> <expr:Expr> "}" => Block{ statements: stmts, expr: expr },
}

Stmt: Stmt = {
    <expr:Expr> ";" => Stmt::Expr(expr),
    <id:Identifier> "=" <expr:Expr> ";" => Stmt::Asgn(id, expr),
}

Expr: Box<Expr> = {
    <id:Identifier> "(" <args:Comma<Expr>> ")" => {
        Box::new(Expr::Function(id, args))
    },
    Expr ComparisonOp Adition => Box::new(Expr::Op(<>)),
    "if" <expr:Expr> <block:Block> => Box::new(Expr::If(
        If{
            condition: expr,
            if_block: block,
            else_block: None
        })),
    "if" <expr:Expr> <ifblock:Block> "else" <elseblock:Block> => Box::new(Expr::If(
        If{
            condition: expr,
            if_block: ifblock,
            else_block: Some(elseblock)
        })),
    Adition,
};

AditionOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

ComparisonOp: Opcode = {
    "==" => Opcode::Eq,
    "!=" => Opcode::Ne,
    "<" => Opcode::Lt,
    "<=" => Opcode::Le,
    ">" => Opcode::Gt,
    ">=" => Opcode::Ge,
};

Adition: Box<Expr> = {
    Adition AditionOp Factor => Box::new(Expr::Op(<>)),
    Factor,
};

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Op(<>)),
    Term,
};

Term: Box<Expr> = {
    Num => Box::new(Expr::Value(VarVal::I32(Some(<>)))),
    Boolean => Box::new(Expr::Value(VarVal::BOOL(Some(<>)))),
    String => Box::new(Expr::Value(VarVal::STRING(Some(<>)))),
    Identifier => Box::new(Expr::Var(<>)),
    "(" <Expr> ")",
};

// Comma separated list of T, where last comma is optional
Comma<T>: Vec<T> = {
    <val:(<T> ",")*> <last:T?> => match last {
        None => val,
        Some(last) => {
            let mut val = val;
            val.push(last);
            val
        }
    }
}

Boolean: bool = {
    "true" => true,
    "false" => false,
}

String: String = {
    <n:string> => n.to_string()
}

Num: i32 = {
    <n:number> => n
};

Identifier: String = {
    <n:identifier> => n.to_string()
}
