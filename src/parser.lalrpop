use crate::ast::{Expr, Opcode, Stmt, Block, Function, Program, Variable, DataType, VarVal, If, ExprType, Else};
use crate::lexer::{Token, Error};

grammar<'input>(input: &'input str);

extern {
    type Location = usize;
    type Error = Error;

    enum Token<'input> {
        // Data
        string => Token::StringValue(<&'input str>),
        number => Token::DecLiteral(<i32>),
        identifier => Token::Ident(<&'input str>),

        // Keywords
        "fn" => Token::Function,
        "if" => Token::If,
        "else" => Token::Else,

        // Data types
        "bool" => Token::Boolean,
        "i32" => Token::I32,
        "String" => Token::String,

        // true false
        "true" => Token::True,
        "false" => Token::False,

        // Symbols
        ":" => Token::Colon,
        ";" => Token::Semi,
        "," => Token::Comma,
        "=" => Token::Equal,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::ForwardSlash,
        "==" => Token::EqualEqual,
        "!=" => Token::BangEqual,
        "<" => Token::Less,
        "<=" => Token::LessEqual,
        ">" => Token::Greater,
        ">=" => Token::GreaterEqual,
        "%" => Token::Percent,
        "&&" => Token::AmpAmp,
        "||" => Token::PipePipe,

        // Delimiters
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
    }
}

pub Program: Program = {
    <functions:Function*> => Program{
        functions: functions.iter().map(|f| (f.name.clone(), f.clone())).collect()
    },
}

pub Function: Function = {
    <position:@L> "fn" <id:Identifier> "(" <variables:Comma<Variable>> ")" <block:Block> =>
    {
        Function{
            position,
            name: id,
            arguments: variables,
            block: block,
        }
    },
}

Variable: Variable = {
    <id:Identifier> ":" <t:DataType> => {
        Variable {
            ident: id,
            value: match t {
                DataType::I32 => VarVal::I32(None),
                DataType::STRING => VarVal::STRING(None),
                DataType::BOOL => VarVal::BOOL(None),
                DataType::UNIT => VarVal::UNIT,
            }
        }
    }
}

DataType: DataType = {
    "i32" => DataType::I32,
    "String" => DataType::STRING,
    "bool" => DataType::BOOL,
    "(" ")" => DataType::UNIT,
}

pub Block: Block = {
    "{" <stmts:Stmt*> <expr:Expr> "}" => Block{ statements: stmts, expr: expr },
}

Stmt: Stmt = {
    <expr:Expr> ";" => Stmt::Expr(expr),
    <id:Identifier> "=" <expr:Expr> ";" => Stmt::Asgn(id, expr),
}

Expr: Box<Expr> = {
    <position:@L> <id:Identifier> "(" <args:Comma<Expr>> ")" => Box::new(
        Expr{
            position,
            expression_type: ExprType::Function(id, args)
        }
    ),
    <position:@L> <lhs:Expr> <op:OrOp> <rhs:And> => Box::new(
        Expr{
            position,
            expression_type: ExprType::Op(lhs,op,rhs)
        }
    ),
    <position:@L> <ifexpr:If> => Box::new(
        Expr{
            position,
            expression_type: ExprType::If(ifexpr)
        }
    ),
    And,
};

If: If = {
    "if" <expr:Expr> <block:Block> =>
        If{
            condition: expr,
            if_block: block,
            else_part: Else::None,
        },
    "if" <expr:Expr> <ifblock:Block> "else" <elseblock:Block> =>
        If{
            condition: expr,
            if_block: ifblock,
            else_part: Else::Else(elseblock)
        },
    "if" <expr:Expr> <ifblock:Block> "else" <ifexpr:If> =>
        If{
            condition: expr,
            if_block: ifblock,
            else_part: Else::ElseIf(Box::new(ifexpr))
        }
}

AditionOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
    "%" => Opcode::Mod,
};

ComparisonOp: Opcode = {
    "==" => Opcode::Eq,
    "!=" => Opcode::Ne,
    "<" => Opcode::Lt,
    "<=" => Opcode::Le,
    ">" => Opcode::Gt,
    ">=" => Opcode::Ge,
};

AndOp: Opcode = {
    "&&" => Opcode::And,
}

OrOp: Opcode = {
    "||" => Opcode::Or,
}

And: Box<Expr> = {
    <position:@L> <lhs:And> <op:AndOp> <rhs:Comparison> => Box::new(
        Expr{
            position,
            expression_type: ExprType::Op(lhs,op,rhs)
        }
    ),
    Comparison,
}

Comparison:  Box<Expr> = {
    <position:@L> <lhs:Comparison> <op:ComparisonOp> <rhs:Adition> => Box::new(
        Expr{
            position,
            expression_type: ExprType::Op(lhs,op,rhs)
        }
    ),
    Adition,
}

Adition: Box<Expr> = {
    <position: @L> <lhs:Adition> <op:AditionOp> <rhs:Factor> => Box::new(
        Expr{
            position,
            expression_type: ExprType::Op(lhs,op,rhs)
        }
    ),
    Factor,
};

Factor: Box<Expr> = {
    <position:@L> <lhs:Factor> <op:FactorOp> <rhs:Term> => Box::new(
        Expr{
            position,
            expression_type: ExprType::Op(lhs,op,rhs)
        }
    ),
    Term,
};

Term: Box<Expr> = {
    <position:@L> <n:Num> => Box::new(
        Expr{
            position,
            expression_type: ExprType::Value(VarVal::I32(Some(n)))
        }
    ),
    <position:@L> <b:Boolean> => Box::new(
        Expr{
            position,
            expression_type: ExprType::Value(VarVal::BOOL(Some(b)))
        }
    ),
    <position:@L> <s:String> => Box::new(
        Expr{
            position,
            expression_type: ExprType::Value(VarVal::STRING(Some(s)))
        }
    ),
    <position:@L> <id:Identifier> => Box::new(
        Expr{
            position,
            expression_type: ExprType::Var(id)
        }
    ),
    "(" <Expr> ")",
};

// Comma separated list of T, where last comma is optional
Comma<T>: Vec<T> = {
    <val:(<T> ",")*> <last:T?> => match last {
        None => val,
        Some(last) => {
            let mut val = val;
            val.push(last);
            val
        }
    }
}

Boolean: bool = {
    "true" => true,
    "false" => false,
}

String: String = {
    <n:string> => n.to_string()
}

Num: i32 = {
    <n:number> => n
};

Identifier: String = {
    <n:identifier> => n.to_string()
}
